{"version":3,"sources":["hooks/useContextTodoList/todoListReducer.js","hooks/useContextTodoList/index.js","hooks/useContextTheme/index.js","components/utils/themeToggle/index.js","components/header/header.js","components/utils/todoListDatePicker/index.js","components/utils/todoListInput/index.js","components/utils/todoListButton/index.js","components/todoForm/todoForm-editItem.js","components/todoForm/reducer/index.js","components/todoForm/todoForm.js","components/todoItem/todoItem-itemContent.js","components/todoItem/todoItem-editItem.js","components/todoItem/todoItem.js","components/todoList/todoList.js","components/index.js","serviceWorker.js","index.js"],"names":["todoListReducer","state","action","type","todoList","addTodoListItem","todoList_newState","splice","removeItem","todoList_DoneItem","todoListIndex","doneItem","done","push","unshift","todoList_EditItem","findTodoListIndex","findIndex","obj","index","editIndex","finalTodoList","slice","editItem","todoList_SortItem","option","SortState","SortResult","sort","after","before","SortAfter","Number","date","replace","RegExp","SortBefore","TodoListContext","createContext","data","localStorageTodoListData","JSON","parse","localStorage","getItem","TodoListProvider","children","useReducer","todo","todoListDispatch","useEffect","setItem","stringify","Provider","value","DarkModeContext","themeReducer","darkMode","localState","ThemeProvider","theme","DarkModeDispatch","props","useContext","style","backgroundColor","checkedChildren","unCheckedChildren","defaultChecked","onChange","className","moment","format","title","src","frameBorder","scrolling","width","height","datePickerInputTheme","datePickerDropdownTheme","allowClear","classNames","locale","placeholder","dropdownClassName","styles","open","undefined","dateString","TextArea","Input","TodoListInput","themeBg","themeFont","ref","refs","TodoListTextArea","rows","ghost","href","icon","onClick","htmlType","disabled","TodoListAddOnClick","sortStateIcon","TodoListSortOnClick","inputTodoReducer","todoInput","inputTitle","content","inputContent","inputDate","useState","todoEditState","setTodoEditState","todoFormData","dispatchTodoInput","inputRef","useRef","OnSubmit","useCallback","e","preventDefault","todoItemValue","current","focus","onSubmit","target","dateEditState","setDateEditState","DateIsAfter","todoItemDataSource","isAfter","TodoItemMarkDone","todoDoneState","color","editTitle","editContent","editDate","editState","setEditState","editTodo","setEditTodo","editTodoItem","editTodoItemText","Item","markTodoDone","prevState","placement","removeTodoItem","item","bordered","emptyText","dataSource","renderItem","key","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"05BAAA,IAmDeA,EAnDS,SAACC,EAAOC,GAC9B,OAAQA,EAAOC,MAEb,IAAK,WACH,OAAO,EAAP,GAAYF,EAAZ,CAAmBG,SAAS,CAAEF,EAAOG,iBAAV,mBAA8BJ,EAAMG,aAGjE,IAAK,cACH,IAAME,EAAiB,YAAOL,EAAMG,UAEpC,OADAE,EAAkBC,OAAOL,EAAOM,WAAY,GACrC,EAAP,GAAYP,EAAZ,CAAmBG,SAAUE,IAG/B,IAAK,YACH,IAAMG,EAAiB,YAAOR,EAAMG,UAC9BM,EAAgBD,EAAkBP,EAAOS,UAK/C,OAJAF,EAAkBF,OAAOL,EAAOS,SAAU,GAE1CD,EAAcE,MAAQF,EAAcE,KACpCF,EAAcE,KAAOH,EAAkBI,KAAKH,GAAiBD,EAAkBK,QAAQJ,GAChF,EAAP,GAAYT,EAAZ,CAAmBG,SAAUK,IAG/B,IAAK,YACH,IAAMM,EAAiB,YAAOd,EAAMG,UAC9BY,EAAoBD,EAAkBE,UAAU,SAACC,EAAKC,GAAN,OAAgBA,IAAUjB,EAAOkB,YACjFC,EAAa,sBACdN,EAAkBO,MAAM,EAAGN,IADb,CAEjBd,EAAOqB,UAFU,YAGdR,EAAkBO,MAAMN,EAAoB,KAEjD,OAAO,EAAP,GAAYf,EAAZ,CAAmBG,SAAUiB,IAG/B,IAAK,oBACH,IAAMG,EAAiB,YAAOvB,EAAMG,UACpCH,EAAMwB,OAAOC,WAAazB,EAAMwB,OAAOC,UAEvC,IAAMC,EAAaH,EAAkBI,KAAK,SAACC,EAAOC,GAChD,IAAIC,EAAYC,OAAOH,EAAMI,KAAKC,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAC5DC,EAAaJ,OAAOF,EAAOG,KAAKC,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAClE,OAAOlC,EAAMwB,OAAOC,UAAYK,EAAYK,EAAaA,EAAaL,IAGxE,OAAO,EAAP,GAAY9B,EAAZ,CAAmBG,SAAUuB,IAE/B,QACE,OAAO1B,IC5CPoC,EAAkBC,0BAElBC,EAAO,CACXnC,SAAU,GACVqB,OAAQ,CAAEC,WAAW,IAGjBc,EAA2BC,KAAKC,MAAMC,aAAaC,QAAQ,aAE3DC,EAAmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACRC,qBAAW/C,EAAiBwC,GAA4BD,GADhD,mBAClCS,EADkC,KAC5BC,EAD4B,KAOzC,OAJAC,oBAAU,WACRP,aAAaQ,QAAQ,WAAYV,KAAKW,UAAUJ,KAC/C,CAACA,IAEG,kBAACX,EAAgBgB,SAAjB,CAA0BC,MAAO,CAAEN,OAAMC,qBAAqBH,I,4NCjBvE,IAAMS,EAAkBjB,0BAElBkB,EAAe,SAACvD,EAAOC,GAC3B,OAAQA,EAAOC,MACb,IAAK,YACH,O,qVAAO,IAAKF,EAAZ,CAAmBwD,UAAWxD,EAAMwD,WAEtC,QACE,OAAOxD,IAIPyD,EAAajB,KAAKC,MAAMC,aAAaC,QAAQ,UAE7Ce,EAAgB,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,EACJC,qBAAWS,EAAcE,GAAc,CAAED,UAAU,IAD/C,mBAC/BG,EAD+B,KACxBC,EADwB,KAOtC,OAJAX,oBAAU,WACRP,aAAaQ,QAAQ,QAASV,KAAKW,UAAUQ,KAC5C,CAACA,IAEG,kBAACL,EAAgBF,SAAjB,CAA0BC,MAAO,CAAEM,QAAOC,qBAAqBf,I,kCClBzD,WAAAgB,GAAU,IACfF,EAAUG,qBAAWR,GAArBK,MACR,OACE,kBAAC,IAAD,CACEI,MAAO,CAAEC,gBAAiB,WAC1BC,gBAAgB,QAChBC,kBAAkB,OAClBC,gBAAiBR,EAAMH,SACvBY,SAAUP,EAAMO,YCLP,aAAO,IACZR,EAAqBE,qBAAWR,GAAhCM,iBAER,OACE,4BAAQS,UAAU,cAChB,yBAAKA,UAAU,mBACb,qCACA,yBAAKA,UAAU,mBAAmBC,MAASC,OAAO,gBAEpD,yBAAKF,UAAU,mBACb,4BACEG,MAAM,kBACNC,IAAI,0FACJC,YAAY,IACZC,UAAU,IACVC,MAAM,OACNC,OAAO,SAET,kBAAC,EAAD,CAAaT,SAAU,kBAAMR,EAAiB,CAAE1D,KAAM,oB,oDCjB/C,WAAA2D,GAAU,IACfF,EAAUG,qBAAWR,GAArBK,MACFmB,EAAuBnB,EAAMH,SAAW,+BAAiC,gCACzEuB,EAA0BpB,EAAMH,SAAW,0BAA4B,2BAE7E,OACE,kBAAC,IAAD,CACEwB,YAAY,EACZX,UAAS,UAAKS,EAAL,YAA6BjB,EAAMoB,YAC5CC,OAAQA,IACRX,OAAO,aACPY,YAAY,wCACZC,kBAAmBL,EACnBhB,MAAOF,EAAMwB,OACbC,KAAMzB,EAAMyB,KACZjC,WAAuBkC,IAAhB1B,EAAMR,MAAsBiB,IAAOT,EAAMR,MAAO,mBAAgBkC,EACvEnB,SAAU,SAACf,EAAOmC,GAAR,OAAuB3B,EAAMO,SAASoB,O,SCpB9CC,EAAaC,IAAbD,SAEFE,EAAgB,SAAA9B,GAAU,IACtBF,EAAUG,qBAAWR,GAArBK,MACFiC,EAAO,UAAMjC,EAAMH,SAAW,OAAS,SACvCqC,EAAS,UAAMlC,EAAMH,SAAW,YAAc,cAEpD,OACE,kBAAC,IAAD,CACEa,UAAS,UAAKR,EAAMoB,WAAX,YAAyBW,EAAzB,YAAoCC,EAApC,KACTC,IAAKjC,EAAMkC,KACX1C,MAAOQ,EAAMR,MACb8B,YAAatB,EAAMsB,YACnBf,SAAUP,EAAMO,YAKhB4B,EAAmB,SAAAnC,GAAU,IACzBF,EAAUG,qBAAWR,GAArBK,MACFiC,EAAO,UAAMjC,EAAMH,SAAW,OAAS,SACvCqC,EAAS,UAAMlC,EAAMH,SAAW,YAAc,cAEpD,OACE,kBAACiC,EAAD,CACEpB,UAAS,UAAKR,EAAMoB,WAAX,YAAyBW,EAAzB,YAAoCC,GAC7CI,KAAMpC,EAAMoC,KACZ5C,MAAOQ,EAAMR,MACb8B,YAAatB,EAAMsB,YACnBf,SAAUP,EAAMO,Y,QC7BP,WAAAP,GAAU,IACfF,EAAUG,qBAAWR,GAArBK,MACFiC,EAAO,UAAMjC,EAAMH,SAAW,cAAgB,gBAEpD,OACE,kBAAC,IAAD,CACE0C,MAAOrC,EAAMqC,MACb7B,UAAS,UAAKR,EAAMoB,WAAX,YAAyBW,EAAzB,KACTO,KAAMtC,EAAMsC,KACZpC,MAAOF,EAAMwB,OACbe,KAAMvC,EAAMuC,KACZC,QAASxC,EAAMwC,QACfC,SAAUzC,EAAMyC,SAChBpG,KAAM2D,EAAM3D,KACZqG,SAAU1C,EAAM0C,UACf1C,EAAMhB,WCfE,WAAAgB,GACb,OACE,yBAAKQ,UAAU,qBACb,kBAAC,EAAD,CAAgB6B,OAAO,EAAMjB,WAAW,2BAA2BmB,KAAK,OAAOC,QAASxC,EAAM2C,oBAA9F,4BAGA,kBAAC,EAAD,CACEN,OAAO,EACPjB,WAAW,yBACXmB,KAAMvC,EAAM4C,cACZJ,QAASxC,EAAM6C,qBAJjB,oC,mjBCXN,IAmBeC,EAnBU,SAAC3G,EAAOC,GAC/B,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,KAAKF,EAAZ,CAAmB4G,UAAU,KAAM5G,EAAM4G,UAAb,CAAwBpC,MAAOvE,EAAO4G,eAEpE,IAAK,gBACH,OAAO,KAAK7G,EAAZ,CAAmB4G,UAAU,KAAM5G,EAAM4G,UAAb,CAAwBE,QAAS7G,EAAO8G,iBAEtE,IAAK,aACH,OAAO,KAAK/G,EAAZ,CAAmB4G,UAAU,KAAM5G,EAAM4G,UAAb,CAAwB5E,KAAM/B,EAAO+G,cAEnE,IAAK,cACH,OAAO,KAAKhH,EAAZ,CAAmB4G,UAAU,KAAM5G,EAAM4G,UAAb,CAAwBpC,MAAO,GAAIsC,QAAS,GAAI9E,KAAM,GAAIrB,MAAM,MAE9F,QACE,OAAOX,ICFE,WAAA6D,GAAU,IAAD,EACoBoD,oBAAS,GAD7B,mBACfC,EADe,KACAC,EADA,OAGarD,qBAAW1B,GAAtCW,EAHc,EAGdA,KAAMC,EAHQ,EAGRA,iBAHQ,EAIoBF,qBAAW6D,EAAkB,CACrEC,UAAW,CAAEpC,MAAO,GAAIsC,QAAS,GAAI9E,KAAM,GAAIrB,MAAM,KALjC,mBAIfyG,EAJe,KAIDC,EAJC,KAOhBC,EAAWC,mBAEXC,EAAWC,sBACf,SAAAC,GACEA,EAAEC,iBACGP,EAAaR,YAElB/C,EAAM+D,cAAcR,EAAaR,WACjCU,EAASO,QAAQC,QACjBT,EAAkB,CAAEnH,KAAM,kBAE5B,CAACkH,EAAaR,UAAW/C,IAG3B,OACE,oCACGqD,EACC,0BAAM7C,UAAU,gBAAgB0D,SAAUP,GACxC,yBAAKnD,UAAU,sBACb,kBAAC,EAAD,CAAgB6B,OAAO,EAAMjB,WAAW,oBAAoBmB,KAAK,QAAQC,QAAS,kBAAMc,GAAiB,OAE3G,yBAAK9C,UAAU,sBACb,kBAAC,EAAD,CACEY,WAAW,iBACXc,KAAMuB,EACNlD,SAAU,SAAAsD,GAAC,OAAIL,EAAkB,CAAEnH,KAAM,cAAe2G,WAAYa,EAAEM,OAAO3E,SAC7EA,MAAO+D,EAAaR,UAAUpC,MAC9BW,YAAY,6BAEd,kBAAC,EAAD,CACEc,KAAM,EACNd,YAAY,uCACZf,SAAU,SAAAsD,GAAC,OAAIL,EAAkB,CAAEnH,KAAM,gBAAiB6G,aAAcW,EAAEM,OAAO3E,SACjFA,MAAO+D,EAAaR,UAAUE,UAEhC,kBAAC,EAAD,CACEzD,MAAuC,KAAhC+D,EAAaR,UAAU5E,KAAcoF,EAAaR,UAAU5E,UAAOuD,EAC1EnB,SAAU,SAAAoB,GAAU,OAAI6B,EAAkB,CAAEnH,KAAM,aAAc8G,UAAWxB,OAE7E,kBAAC,EAAD,CACEU,OAAO,EACPI,SAAS,SACTC,SAA2C,KAAjCa,EAAaR,UAAUpC,MACjCS,WAAW,kBACXmB,KAAK,QALP,8BAWJ,kBAAC,EAAD,CACEI,mBAAoB,kBAAMW,GAAiB,IAC3CT,oBAAqB,kBAAM1D,EAAiB,CAAE9C,KAAM,uBACpDuG,cAAe1D,EAAKvB,OAAOC,UAAY,kBAAoB,qB,kBC/DtD,WAAAoC,GAAU,IAAD,EACoBoD,oBAAS,GAD7B,mBACfgB,EADe,KACAC,EADA,KAIdvE,GADqBG,qBAAW1B,GAAhCY,iBACUc,qBAAWR,GAArBK,OACFkC,EAAS,UAAMlC,EAAMH,SAAW,YAAc,cAE9C2E,EAAc7D,IAAOT,EAAMuE,mBAAmBpG,MAAMqG,QAAQ/D,MAASC,OAAO,eAC5E+D,EAAgB,UAAMzE,EAAM0E,cAAgB,gBAAkB,GAA9C,YAAoD1C,GAE1E,OACE,yBAAKxB,UAAS,6BAAwBwB,EAAxB,YAAqCyC,IACjD,yBAAKjE,UAAU,4BAA4BR,EAAMuE,mBAAmB5D,OACpE,yBAAKH,UAAU,8BAA8BR,EAAMuE,mBAAmBtB,SACtE,yBAAKzC,UAAU,2BACsB,KAAlCR,EAAMuE,mBAAmBpG,MACxB,oCACGiG,EACC,kBAAC,EAAD,CACE3C,KAAM2C,EACN5E,MAAyC,KAAlCQ,EAAMuE,mBAAmBpG,UAAcuD,EAAY1B,EAAMuE,mBAAmBpG,KACnFoC,SAAU,SAAAoB,GACR0C,GAAkBD,MAItB,kBAAC,EAAD,CACE/B,QAAOvC,EAAMH,SACb6B,OAAQ,CAAEmD,MAAOL,EAAc,UAAY,WAC3C/B,KAAM,WACNC,QAAS,kBAAM6B,GAAkBD,KACjC,0BAAM5D,UAAS,UAAKwB,EAAL,YAAkByC,IAAqBzE,EAAMuE,mBAAmBpG,WCpChF,WAAA6B,GACb,OACE,6BACE,kBAAC,EAAD,CACEoB,WAAU,+BACV5B,MAAOQ,EAAMuE,mBAAmB5D,MAChCW,YAAY,2BACZf,SAAU,SAAAsD,GAAC,OAAI7D,EAAM4E,UAAUf,EAAEM,OAAO3E,UAE1C,kBAAC,EAAD,CACE4B,WAAU,+BACV5B,MAAOQ,EAAMuE,mBAAmBtB,QAChC3B,YAAY,uCACZf,SAAU,SAAAsD,GAAC,OAAI7D,EAAM6E,YAAYhB,EAAEM,OAAO3E,UAE5C,kBAAC,EAAD,CACEA,MAAyC,KAAlCQ,EAAMuE,mBAAmBpG,UAAcuD,EAAY1B,EAAMuE,mBAAmBpG,KACnFoC,SAAU,SAAAoB,GAAU,OAAI3B,EAAM8E,SAASnD,Q,mjBCVhC,eAAA3B,GAAU,IAAD,EACYoD,oBAAS,GADrB,mBACf2B,EADe,KACJC,EADI,OAEU5B,mBAAS,CAAEzC,MAAO,GAAIsC,QAAS,GAAI9E,KAAM,GAAIrB,MAAM,IAF7D,mBAEfmI,EAFe,KAELC,EAFK,KAIdpF,EAAUG,qBAAWR,GAArBK,MACFiC,EAAO,UAAMjC,EAAMH,SAAW,gBAAkB,kBAEtDP,oBAAU,WACR8F,EAAYlF,EAAMuE,qBACjB,CAACvE,EAAMuE,qBAEV,IAAMY,EAAe,WACnBH,GAAcD,GACd/E,EAAMoF,iBAAiBH,IAGzB,OACE,kBAAC,IAAKI,KAAN,CAAW7E,UAAWuB,GACpB,yBAAKvB,UAAU,iBACb,kBAAC,EAAD,CACE6B,OAAO,EACPjB,WAAY,qBACZI,OAAQ,CAAEmD,MAAO3E,EAAMuE,mBAAmBzH,KAAO,UAAY,WAC7D0F,QAASuC,EAAY/E,EAAMsF,aAAeH,EAC1C5C,KAAM,UAEPwC,EACC,kBAAC,EAAD,CAAaL,cAAe1E,EAAM0E,cAAeH,mBAAoBvE,EAAMuE,qBAE3E,kBAAC,EAAD,CACEA,mBAAoBU,EACpBL,UAAW,SAAAjE,GAAK,OAAIuE,EAAY,SAAAK,GAAS,YAAUA,EAAV,CAAqB5E,aAC9DkE,YAAa,SAAA5B,GAAO,OAAIiC,EAAY,SAAAK,GAAS,YAAUA,EAAV,CAAqBtC,eAClE6B,SAAU,SAAA3G,GAAI,OAAI+G,EAAY,SAAAK,GAAS,YAAUA,EAAV,CAAqBpH,eAKlE,yBAAKqC,UAAU,iBACZuE,GACC,kBAAC,IAAD,CAASpE,MAAM,uCAAS6E,UAAU,UAChC,kBAAC,EAAD,CAAgBnD,OAAO,EAAMjB,WAAU,qBAAwBoB,QAAS2C,EAAc5C,KAAM,UAGhG,kBAAC,IAAD,CAAS5B,MAAM,eAAK6E,UAAU,UAC5B,kBAAC,EAAD,CAAgBnD,OAAO,EAAMjB,WAAU,qBAAwBoB,QAASxC,EAAMyF,eAAgBlD,KAAK,eCjD9F,aAAO,IAAD,EACgBtC,qBAAW1B,GAAtCW,EADW,EACXA,KAAMC,EADK,EACLA,iBAEd,OACE,oCACE,kBAAC,EAAD,CAAU4E,cAAe,SAAA2B,GAAI,OAAIvG,EAAiB,CAAE9C,KAAM,WAAYE,gBAAiBmJ,OACvF,kBAAC,IAAD,CACEC,UAAQ,EACRtE,OAAQ,CAAEuE,UAAW,8CACrBC,WAAY3G,EAAK5C,SACjBwJ,WAAY,SAACJ,EAAMrI,GAAP,OACV,kBAAC,EAAD,CACEqH,cAAegB,EAAK5I,KACpBwI,aAAc,kBAAMnG,EAAiB,CAAE9C,KAAM,YAAaQ,SAAUQ,KACpEoI,eAAgB,kBAAMtG,EAAiB,CAAE9C,KAAM,cAAeK,WAAYW,KAC1E+H,iBAAkB,SAAAM,GAAI,OAAIvG,EAAiB,CAAE9C,KAAM,YAAaiB,UAAWD,EAAOI,SAAUiI,KAC5FnB,mBAAoBmB,EACpBK,IAAK1I,SChBF,aAAO,IACZyC,EAAUG,qBAAWR,GAArBK,MACFiC,EAAO,UAAMjC,EAAMH,SAAW,OAAS,SAM7C,OAJAP,oBAAU,WACR4G,SAASC,eAAe,QAAQzF,UAAYuB,GAC3C,CAACA,IAGF,yBAAKvB,UAAS,cAASuB,IACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,S,OCTYmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OAAO,kBARJ,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAKU,MAASR,SAASC,eAAe,SDgH3C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8cf75f87.chunk.js","sourcesContent":["const todoListReducer = (state, action) => {\n  switch (action.type) {\n    // 增加項目\n    case \"ADD_ITEM\":\n      return { ...state, todoList: [action.addTodoListItem, ...state.todoList] };\n\n    // 刪除項目\n    case \"REMOVE_ITEM\":\n      const todoList_newState = [...state.todoList];\n      todoList_newState.splice(action.removeItem, 1);\n      return { ...state, todoList: todoList_newState };\n\n    // 項目標示完成\n    case \"DONE_ITEM\":\n      const todoList_DoneItem = [...state.todoList];\n      const todoListIndex = todoList_DoneItem[action.doneItem];\n      todoList_DoneItem.splice(action.doneItem, 1);\n\n      todoListIndex.done = !todoListIndex.done;\n      todoListIndex.done ? todoList_DoneItem.push(todoListIndex) : todoList_DoneItem.unshift(todoListIndex);\n      return { ...state, todoList: todoList_DoneItem };\n\n    // 編輯項目\n    case \"EDIT_ITEM\":\n      const todoList_EditItem = [...state.todoList];\n      const findTodoListIndex = todoList_EditItem.findIndex((obj, index) => index === action.editIndex);\n      const finalTodoList = [\n        ...todoList_EditItem.slice(0, findTodoListIndex),\n        action.editItem,\n        ...todoList_EditItem.slice(findTodoListIndex + 1)\n      ];\n      return { ...state, todoList: finalTodoList };\n\n    // 項目排序\n    case \"SORT_ITEM_BY_DATE\":\n      const todoList_SortItem = [...state.todoList];\n      state.option.SortState = !state.option.SortState;\n\n      const SortResult = todoList_SortItem.sort((after, before) => {\n        let SortAfter = Number(after.date.replace(new RegExp(\"-\", \"g\"), \"\"));\n        let SortBefore = Number(before.date.replace(new RegExp(\"-\", \"g\"), \"\"));\n        return state.option.SortState ? SortAfter - SortBefore : SortBefore - SortAfter;\n      });\n\n      return { ...state, todoList: SortResult };\n\n    default:\n      return state;\n  }\n};\n\nexport default todoListReducer;\n","import React, { createContext, useEffect, useReducer } from \"react\";\n\nimport todoListReducer from \"hooks/useContextTodoList/todoListReducer\";\nconst TodoListContext = createContext();\n\nconst data = {\n  todoList: [],\n  option: { SortState: true }\n};\n\nconst localStorageTodoListData = JSON.parse(localStorage.getItem(\"todoList\"));\n\nconst TodoListProvider = ({ children }) => {\n  const [todo, todoListDispatch] = useReducer(todoListReducer, localStorageTodoListData || data);\n\n  useEffect(() => {\n    localStorage.setItem(\"todoList\", JSON.stringify(todo));\n  }, [todo]);\n\n  return <TodoListContext.Provider value={{ todo, todoListDispatch }}>{children}</TodoListContext.Provider>;\n};\n\nexport { TodoListContext, TodoListProvider };\n","import React, { createContext, useEffect, useReducer } from \"react\";\n\nconst DarkModeContext = createContext();\n\nconst themeReducer = (state, action) => {\n  switch (action.type) {\n    case \"DARK_MODE\":\n      return { ...state, darkMode: !state.darkMode };\n\n    default:\n      return state;\n  }\n};\n\nconst localState = JSON.parse(localStorage.getItem(\"theme\"));\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, DarkModeDispatch] = useReducer(themeReducer, localState || { darkMode: false });\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", JSON.stringify(theme));\n  }, [theme]);\n\n  return <DarkModeContext.Provider value={{ theme, DarkModeDispatch }}>{children}</DarkModeContext.Provider>;\n};\n\nexport { DarkModeContext, ThemeProvider };\n","import React, { useContext } from \"react\";\n\nimport { Switch } from \"antd\";\n\nimport { DarkModeContext } from \"hooks/useContextTheme\";\nexport default props => {\n  const { theme } = useContext(DarkModeContext);\n  return (\n    <Switch\n      style={{ backgroundColor: \"#0f1114\" }}\n      checkedChildren=\"Light\"\n      unCheckedChildren=\"Dark\"\n      defaultChecked={!theme.darkMode}\n      onChange={props.onChange}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"components/header/header.scss\";\n\nimport moment from \"moment\";\n\nimport { DarkModeContext } from \"hooks/useContextTheme\";\nimport ThemeToggle from \"components/utils/themeToggle\";\n\nexport default () => {\n  const { DarkModeDispatch } = useContext(DarkModeContext);\n\n  return (\n    <header className=\"App-header\">\n      <div className=\"App-header-Item\">\n        <h2>Tasks</h2>\n        <div className=\"App-header-date\">{moment().format(\"YYYY-DD-MM\")}</div>\n      </div>\n      <div className=\"App-header-Item\">\n        <iframe\n          title=\"github-todolist\"\n          src=\"https://ghbtns.com/github-btn.html?user=destroymayor&repo=todolist&type=star&count=true\"\n          frameBorder=\"0\"\n          scrolling=\"0\"\n          width=\"80px\"\n          height=\"20px\"\n        />\n        <ThemeToggle onChange={() => DarkModeDispatch({ type: \"DARK_MODE\" })} />\n      </div>\n    </header>\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"components/utils/todoListDatePicker/index.scss\";\n\nimport locale from \"antd/lib/date-picker/locale/zh_TW\";\nimport { DatePicker } from \"antd\";\nimport moment from \"moment\";\n\nimport { DarkModeContext } from \"hooks/useContextTheme\";\n\nexport default props => {\n  const { theme } = useContext(DarkModeContext);\n  const datePickerInputTheme = theme.darkMode ? \"todoList-form-item-date-dark\" : \"todoList-form-item-date-light\";\n  const datePickerDropdownTheme = theme.darkMode ? \"ant-calendar-panel-dark\" : \"ant-calendar-panel-light\";\n\n  return (\n    <DatePicker\n      allowClear={false}\n      className={`${datePickerInputTheme} ${props.classNames}`}\n      locale={locale}\n      format=\"YYYY-MM-DD\"\n      placeholder=\"新增日期/時間\"\n      dropdownClassName={datePickerDropdownTheme}\n      style={props.styles}\n      open={props.open}\n      value={props.value !== undefined ? moment(props.value, \"YYYY-MM-DD\") : undefined}\n      onChange={(value, dateString) => props.onChange(dateString)}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\n\nimport { DarkModeContext } from \"hooks/useContextTheme\";\n\nimport { Input } from \"antd\";\nconst { TextArea } = Input;\n\nconst TodoListInput = props => {\n  const { theme } = useContext(DarkModeContext);\n  const themeBg = `${theme.darkMode ? \"dark\" : \"light\"}`;\n  const themeFont = `${theme.darkMode ? \"dark-font\" : \"light-font\"}`;\n\n  return (\n    <Input\n      className={`${props.classNames} ${themeBg} ${themeFont} `}\n      ref={props.refs}\n      value={props.value}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n    />\n  );\n};\n\nconst TodoListTextArea = props => {\n  const { theme } = useContext(DarkModeContext);\n  const themeBg = `${theme.darkMode ? \"dark\" : \"light\"}`;\n  const themeFont = `${theme.darkMode ? \"dark-font\" : \"light-font\"}`;\n\n  return (\n    <TextArea\n      className={`${props.classNames} ${themeBg} ${themeFont}`}\n      rows={props.rows}\n      value={props.value}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n    />\n  );\n};\n\nexport { TodoListInput, TodoListTextArea };\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\n\nimport { DarkModeContext } from \"hooks/useContextTheme\";\n\nexport default props => {\n  const { theme } = useContext(DarkModeContext);\n  const themeBg = `${theme.darkMode ? \"dark-button\" : \"light-button\"}`;\n\n  return (\n    <Button\n      ghost={props.ghost}\n      className={`${props.classNames} ${themeBg} `}\n      href={props.href}\n      style={props.styles}\n      icon={props.icon}\n      onClick={props.onClick}\n      htmlType={props.htmlType}\n      type={props.type}\n      disabled={props.disabled}>\n      {props.children}\n    </Button>\n  );\n};\n","import React from \"react\";\n\n//components\nimport TodoListButton from \"components/utils/todoListButton\";\n\nexport default props => {\n  return (\n    <div className=\"todoForm-editItem\">\n      <TodoListButton ghost={true} classNames=\"todoForm-editItem-addBtn\" icon=\"plus\" onClick={props.TodoListAddOnClick}>\n        新增工作\n      </TodoListButton>\n      <TodoListButton\n        ghost={true}\n        classNames=\"todoForm-editItem-menu\"\n        icon={props.sortStateIcon}\n        onClick={props.TodoListSortOnClick}>\n        依日期排序\n      </TodoListButton>\n    </div>\n  );\n};\n","const inputTodoReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_TITLE\":\n      return { ...state, todoInput: { ...state.todoInput, title: action.inputTitle } };\n\n    case \"INPUT_CONTENT\":\n      return { ...state, todoInput: { ...state.todoInput, content: action.inputContent } };\n\n    case \"INPUT_DATE\":\n      return { ...state, todoInput: { ...state.todoInput, date: action.inputDate } };\n\n    case \"INPUT_CLEAR\":\n      return { ...state, todoInput: { ...state.todoInput, title: \"\", content: \"\", date: \"\", done: false } };\n\n    default:\n      return state;\n  }\n};\n\nexport default inputTodoReducer;\n","import React, { useState, useReducer, useContext, useRef, useCallback } from \"react\";\nimport \"components/todoForm/todoForm.scss\";\n\n//components\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\nimport { TodoListInput, TodoListTextArea } from \"components/utils/todoListInput\";\nimport TodoListButton from \"components/utils/todoListButton\";\nimport TodoFormEditItem from \"components/todoForm/todoForm-editItem\";\n\n// reducer\nimport inputTodoReducer from \"components/todoForm/reducer\";\nimport { TodoListContext } from \"hooks/useContextTodoList\";\n\nexport default props => {\n  const [todoEditState, setTodoEditState] = useState(false);\n\n  const { todo, todoListDispatch } = useContext(TodoListContext);\n  const [todoFormData, dispatchTodoInput] = useReducer(inputTodoReducer, {\n    todoInput: { title: \"\", content: \"\", date: \"\", done: false }\n  });\n  const inputRef = useRef();\n\n  const OnSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      if (!todoFormData.todoInput) return;\n\n      props.todoItemValue(todoFormData.todoInput);\n      inputRef.current.focus();\n      dispatchTodoInput({ type: \"INPUT_CLEAR\" });\n    },\n    [todoFormData.todoInput, props]\n  );\n\n  return (\n    <>\n      {todoEditState ? (\n        <form className=\"todoList-form\" onSubmit={OnSubmit}>\n          <div className=\"todoList-form-item\">\n            <TodoListButton ghost={true} classNames=\"todoForm-closeBtn\" icon=\"close\" onClick={() => setTodoEditState(false)} />\n          </div>\n          <div className=\"todoList-form-item\">\n            <TodoListInput\n              classNames=\"todoList-input\"\n              refs={inputRef}\n              onChange={e => dispatchTodoInput({ type: \"INPUT_TITLE\", inputTitle: e.target.value })}\n              value={todoFormData.todoInput.title}\n              placeholder=\"輸入標題\"\n            />\n            <TodoListTextArea\n              rows={4}\n              placeholder=\"輸入詳細內容\"\n              onChange={e => dispatchTodoInput({ type: \"INPUT_CONTENT\", inputContent: e.target.value })}\n              value={todoFormData.todoInput.content}\n            />\n            <TodoListDatePicker\n              value={todoFormData.todoInput.date !== \"\" ? todoFormData.todoInput.date : undefined}\n              onChange={dateString => dispatchTodoInput({ type: \"INPUT_DATE\", inputDate: dateString })}\n            />\n            <TodoListButton\n              ghost={false}\n              htmlType=\"submit\"\n              disabled={todoFormData.todoInput.title !== \"\" ? false : true}\n              classNames=\"todoForm-addBtn\"\n              icon=\"plus\">\n              新增工作\n            </TodoListButton>\n          </div>\n        </form>\n      ) : (\n        <TodoFormEditItem\n          TodoListAddOnClick={() => setTodoEditState(true)}\n          TodoListSortOnClick={() => todoListDispatch({ type: \"SORT_ITEM_BY_DATE\" })}\n          sortStateIcon={todo.option.SortState ? \"sort-descending\" : \"sort-ascending\"}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState, useContext } from \"react\";\n\nimport TodoListButton from \"components/utils/todoListButton\";\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\n\nimport { DarkModeContext } from \"hooks/useContextTheme\";\nimport { TodoListContext } from \"hooks/useContextTodoList\";\n\nimport moment from \"moment\";\n\nexport default props => {\n  const [dateEditState, setDateEditState] = useState(false);\n\n  const { todoListDispatch } = useContext(TodoListContext);\n  const { theme } = useContext(DarkModeContext);\n  const themeFont = `${theme.darkMode ? \"dark-font\" : \"light-font\"}`;\n\n  const DateIsAfter = moment(props.todoItemDataSource.date).isAfter(moment().format(\"YYYY-MM-DD\"));\n  const TodoItemMarkDone = `${props.todoDoneState ? \"todoList-done\" : \"\"} ${themeFont}`;\n\n  return (\n    <div className={`todoList-item-text ${themeFont} ${TodoItemMarkDone}`}>\n      <div className=\"todoList-item-text-title\">{props.todoItemDataSource.title}</div>\n      <div className=\"todoList-item-text-content\">{props.todoItemDataSource.content}</div>\n      <div className=\"todoList-item-text-date\">\n        {props.todoItemDataSource.date !== \"\" && (\n          <>\n            {dateEditState ? (\n              <TodoListDatePicker\n                open={dateEditState}\n                value={props.todoItemDataSource.date === \"\" ? undefined : props.todoItemDataSource.date}\n                onChange={dateString => {\n                  setDateEditState(!dateEditState);\n                }}\n              />\n            ) : (\n              <TodoListButton\n                ghost={theme.darkMode ? true : false}\n                styles={{ color: DateIsAfter ? \"#1a73e8\" : \"#d93025\" }}\n                icon={\"calendar\"}\n                onClick={() => setDateEditState(!dateEditState)}>\n                <span className={`${themeFont} ${TodoItemMarkDone}`}>{props.todoItemDataSource.date}</span>\n              </TodoListButton>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\nimport { TodoListInput, TodoListTextArea } from \"components/utils/todoListInput\";\n\nexport default props => {\n  return (\n    <div>\n      <TodoListInput\n        classNames={`todoList-item-edit-component`}\n        value={props.todoItemDataSource.title}\n        placeholder=\"輸入標題\"\n        onChange={e => props.editTitle(e.target.value)}\n      />\n      <TodoListTextArea\n        classNames={`todoList-item-edit-component`}\n        value={props.todoItemDataSource.content}\n        placeholder=\"輸入詳細內容\"\n        onChange={e => props.editContent(e.target.value)}\n      />\n      <TodoListDatePicker\n        value={props.todoItemDataSource.date === \"\" ? undefined : props.todoItemDataSource.date}\n        onChange={dateString => props.editDate(dateString)}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"components/todoItem/todoItem.scss\";\n\n//component\nimport { List, Tooltip } from \"antd\";\nimport TodoListButton from \"components/utils/todoListButton\";\nimport ItemContent from \"components/todoItem/todoItem-itemContent\";\nimport EditItem from \"components/todoItem/todoItem-editItem\";\n\n// global props\nimport { DarkModeContext } from \"hooks/useContextTheme\";\n\nexport default props => {\n  const [editState, setEditState] = useState(true);\n  const [editTodo, setEditTodo] = useState({ title: \"\", content: \"\", date: \"\", done: false });\n\n  const { theme } = useContext(DarkModeContext);\n  const themeBg = `${theme.darkMode ? \"dark-todoItem\" : \"light-todoItem\"}`;\n\n  useEffect(() => {\n    setEditTodo(props.todoItemDataSource);\n  }, [props.todoItemDataSource]);\n\n  const editTodoItem = () => {\n    setEditState(!editState);\n    props.editTodoItemText(editTodo);\n  };\n\n  return (\n    <List.Item className={themeBg}>\n      <div className=\"todoList-item\">\n        <TodoListButton\n          ghost={true}\n          classNames={\"todoList-item-ctrl\"}\n          styles={{ color: props.todoItemDataSource.done ? \"#1a73e8\" : \"#aaaaaa\" }}\n          onClick={editState ? props.markTodoDone : editTodoItem}\n          icon={\"check\"}\n        />\n        {editState ? (\n          <ItemContent todoDoneState={props.todoDoneState} todoItemDataSource={props.todoItemDataSource} />\n        ) : (\n          <EditItem\n            todoItemDataSource={editTodo}\n            editTitle={title => setEditTodo(prevState => ({ ...prevState, title }))}\n            editContent={content => setEditTodo(prevState => ({ ...prevState, content }))}\n            editDate={date => setEditTodo(prevState => ({ ...prevState, date }))}\n          />\n        )}\n      </div>\n      {/* ctrl */}\n      <div className=\"todoList-ctrl\">\n        {editState && (\n          <Tooltip title=\"編輯詳細資訊\" placement=\"bottom\">\n            <TodoListButton ghost={true} classNames={`todoList-item-ctrl`} onClick={editTodoItem} icon={\"edit\"} />\n          </Tooltip>\n        )}\n        <Tooltip title=\"刪除\" placement=\"bottom\">\n          <TodoListButton ghost={true} classNames={`todoList-item-ctrl`} onClick={props.removeTodoItem} icon=\"delete\" />\n        </Tooltip>\n      </div>\n    </List.Item>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { List } from \"antd\";\n\nimport TodoFrom from \"components/todoForm/todoForm\";\nimport TodoItem from \"components/todoItem/todoItem\";\n\nimport { TodoListContext } from \"hooks/useContextTodoList\";\n\nexport default () => {\n  const { todo, todoListDispatch } = useContext(TodoListContext);\n\n  return (\n    <>\n      <TodoFrom todoItemValue={item => todoListDispatch({ type: \"ADD_ITEM\", addTodoListItem: item })} />\n      <List\n        bordered\n        locale={{ emptyText: \"目前無代辦事項\" }}\n        dataSource={todo.todoList}\n        renderItem={(item, index) => (\n          <TodoItem\n            todoDoneState={item.done}\n            markTodoDone={() => todoListDispatch({ type: \"DONE_ITEM\", doneItem: index })}\n            removeTodoItem={() => todoListDispatch({ type: \"REMOVE_ITEM\", removeItem: index })}\n            editTodoItemText={item => todoListDispatch({ type: \"EDIT_ITEM\", editIndex: index, editItem: item })}\n            todoItemDataSource={item}\n            key={index}\n          />\n        )}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useContext } from \"react\";\nimport \"components/index.scss\";\n\nimport { TodoListProvider } from \"hooks/useContextTodoList\";\nimport { DarkModeContext } from \"hooks/useContextTheme\";\n\nimport Header from \"components/header/header\";\nimport TodoList from \"components/todoList/todoList\";\n\nexport default () => {\n  const { theme } = useContext(DarkModeContext);\n  const themeBg = `${theme.darkMode ? \"dark\" : \"light\"}`;\n\n  useEffect(() => {\n    document.getElementById(\"body\").className = themeBg;\n  }, [themeBg]);\n\n  return (\n    <div className={`App ${themeBg}`}>\n      <Header />\n      <TodoListProvider>\n        <TodoList />\n      </TodoListProvider>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\n\nimport Page from \"components\";\nimport { ThemeProvider } from \"hooks/useContextTheme\";\nimport \"styles/theme.scss\";\nimport * as serviceWorker from \"serviceWorker\";\n\nconst App = () => {\n  return (\n    <ThemeProvider>\n      <Page />\n    </ThemeProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept(\"components\", () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n  });\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}