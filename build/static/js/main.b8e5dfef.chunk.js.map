{"version":3,"sources":["hooks/useContextTodoList/todoListReducer.js","hooks/useContextTodoList/index.js","hooks/useContextTheme/index.js","components/utils/themeToggle/index.js","components/header/header.js","components/utils/todoListDatePicker/index.js","components/utils/todoListInput/index.js","components/utils/todoListButton/index.js","components/todoForm/todoForm-editItem.js","components/todoForm/reducer/index.js","components/todoForm/todoForm.js","components/todoItem/todoItem-itemContent.js","components/todoItem/todoItem-editItem.js","components/todoItem/todoItem.js","components/todoList/todoList.js","components/index.js","serviceWorker.js","index.js"],"names":["todoListReducer","state","action","type","todoList","addTodoListItem","todoList_newState","splice","removeItem","todoList_DoneItem","todoListIndex","doneItem","done","push","unshift","todoList_EditItem","findTodoListIndex","findIndex","obj","index","editIndex","finalTodoList","slice","editItem","todoList_SortItem","option","SortState","SortResult","sort","after","before","SortAfter","Number","date","replace","RegExp","SortBefore","TodoListContext","createContext","data","localStorageTodoListData","JSON","parse","localStorage","getItem","TodoListProvider","children","useReducer","todo","todoListDispatch","useEffect","setItem","stringify","Provider","value","DarkModeContext","themeReducer","darkMode","localState","ThemeProvider","theme","DarkModeDispatch","props","useContext","style","backgroundColor","checkedChildren","unCheckedChildren","defaultChecked","onChange","className","moment","format","title","src","frameBorder","scrolling","width","height","datePickerInputTheme","datePickerDropdownTheme","allowClear","showToday","classNames","locale","placeholder","dropdownClassName","styles","undefined","dateString","TextArea","Input","TodoListInput","themeBg","themeFont","ref","refs","TodoListTextArea","rows","ghost","href","icon","onClick","htmlType","disabled","TodoListAddOnClick","sortStateIcon","TodoListSortOnClick","inputTodoReducer","todoInput","inputTitle","content","inputContent","inputDate","useState","todoEditState","setTodoEditState","todoFormData","dispatchTodoInput","inputRef","useRef","OnSubmit","useCallback","e","preventDefault","todoItemValue","current","focus","onSubmit","target","dateEditState","setDateEditState","DateIsAfter","todoItemDataSource","isAfter","TodoItemMarkDone","todoDoneState","open","editTodoItemDate","color","editTitle","editContent","editDate","editState","setEditState","editTodo","setEditTodo","editTodoItem","editTodoItemText","Item","markTodoDone","prevState","placement","removeTodoItem","item","bordered","emptyText","dataSource","renderItem","key","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8e5dfef.chunk.js","sourcesContent":["const todoListReducer = (state, action) => {\r\n  switch (action.type) {\r\n    // 增加項目\r\n    case \"ADD_ITEM\":\r\n      return { ...state, todoList: [action.addTodoListItem, ...state.todoList] };\r\n\r\n    // 刪除項目\r\n    case \"REMOVE_ITEM\":\r\n      const todoList_newState = [...state.todoList];\r\n      todoList_newState.splice(action.removeItem, 1);\r\n      return { ...state, todoList: todoList_newState };\r\n\r\n    // 項目標示完成\r\n    case \"DONE_ITEM\":\r\n      const todoList_DoneItem = [...state.todoList];\r\n      const todoListIndex = todoList_DoneItem[action.doneItem];\r\n      todoList_DoneItem.splice(action.doneItem, 1);\r\n\r\n      todoListIndex.done = !todoListIndex.done;\r\n      todoListIndex.done ? todoList_DoneItem.push(todoListIndex) : todoList_DoneItem.unshift(todoListIndex);\r\n      return { ...state, todoList: todoList_DoneItem };\r\n\r\n    // 編輯項目\r\n    case \"EDIT_ITEM\":\r\n      const todoList_EditItem = [...state.todoList];\r\n      const findTodoListIndex = todoList_EditItem.findIndex((obj, index) => index === action.editIndex);\r\n      const finalTodoList = [\r\n        ...todoList_EditItem.slice(0, findTodoListIndex),\r\n        action.editItem,\r\n        ...todoList_EditItem.slice(findTodoListIndex + 1)\r\n      ];\r\n      return { ...state, todoList: finalTodoList };\r\n\r\n    // 項目排序\r\n    case \"SORT_ITEM_BY_DATE\":\r\n      const todoList_SortItem = [...state.todoList];\r\n      state.option.SortState = !state.option.SortState;\r\n\r\n      const SortResult = todoList_SortItem.sort((after, before) => {\r\n        let SortAfter = Number(after.date.replace(new RegExp(\"-\", \"g\"), \"\"));\r\n        let SortBefore = Number(before.date.replace(new RegExp(\"-\", \"g\"), \"\"));\r\n        return state.option.SortState ? SortAfter - SortBefore : SortBefore - SortAfter;\r\n      });\r\n\r\n      return { ...state, todoList: SortResult };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoListReducer;\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\n\r\nimport todoListReducer from \"hooks/useContextTodoList/todoListReducer\";\r\nconst TodoListContext = createContext();\r\n\r\nconst data = {\r\n  todoList: [],\r\n  option: { SortState: true }\r\n};\r\n\r\nconst localStorageTodoListData = JSON.parse(localStorage.getItem(\"todoList\"));\r\n\r\nconst TodoListProvider = ({ children }) => {\r\n  const [todo, todoListDispatch] = useReducer(todoListReducer, localStorageTodoListData || data);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoList\", JSON.stringify(todo));\r\n  }, [todo]);\r\n\r\n  return <TodoListContext.Provider value={{ todo, todoListDispatch }}>{children}</TodoListContext.Provider>;\r\n};\r\n\r\nexport { TodoListContext, TodoListProvider };\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\n\r\nconst DarkModeContext = createContext();\r\n\r\nconst themeReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DARK_MODE\":\r\n      return { ...state, darkMode: !state.darkMode };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst localState = JSON.parse(localStorage.getItem(\"theme\"));\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n  const [theme, DarkModeDispatch] = useReducer(themeReducer, localState || { darkMode: false });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"theme\", JSON.stringify(theme));\r\n  }, [theme]);\r\n\r\n  return <DarkModeContext.Provider value={{ theme, DarkModeDispatch }}>{children}</DarkModeContext.Provider>;\r\n};\r\n\r\nexport { DarkModeContext, ThemeProvider };\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Switch } from \"antd\";\r\n\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\nexport default props => {\r\n  const { theme } = useContext(DarkModeContext);\r\n  return (\r\n    <Switch\r\n      style={{ backgroundColor: \"#0f1114\" }}\r\n      checkedChildren=\"Light\"\r\n      unCheckedChildren=\"Dark\"\r\n      defaultChecked={!theme.darkMode}\r\n      onChange={props.onChange}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport \"components/header/header.scss\";\r\n\r\nimport moment from \"moment\";\r\n\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\nimport ThemeToggle from \"components/utils/themeToggle\";\r\n\r\nexport default () => {\r\n  const { DarkModeDispatch } = useContext(DarkModeContext);\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <div className=\"App-header-Item\">\r\n        <h2>Tasks</h2>\r\n        <div className=\"App-header-date\">{moment().format(\"YYYY-MM-DD\")}</div>\r\n      </div>\r\n      <div className=\"App-header-Item\">\r\n        <iframe\r\n          title=\"github-todolist\"\r\n          src=\"https://ghbtns.com/github-btn.html?user=destroymayor&repo=todolist&type=star&count=true\"\r\n          frameBorder=\"0\"\r\n          scrolling=\"0\"\r\n          width=\"80px\"\r\n          height=\"20px\"\r\n        />\r\n        <ThemeToggle onChange={() => DarkModeDispatch({ type: \"DARK_MODE\" })} />\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport \"components/utils/todoListDatePicker/index.scss\";\r\n\r\nimport locale from \"antd/lib/date-picker/locale/zh_TW\";\r\nimport { DatePicker } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\n\r\nexport default props => {\r\n  const { theme } = useContext(DarkModeContext);\r\n  const datePickerInputTheme = theme.darkMode ? \"todoList-form-item-date-dark\" : \"todoList-form-item-date-light\";\r\n  const datePickerDropdownTheme = theme.darkMode ? \"ant-calendar-panel-dark\" : \"ant-calendar-panel-light\";\r\n\r\n  return (\r\n    <DatePicker\r\n      {...props}\r\n      allowClear={false}\r\n      showToday={false}\r\n      className={`${datePickerInputTheme} ${props.classNames}`}\r\n      locale={locale}\r\n      format=\"YYYY-MM-DD\"\r\n      placeholder=\"新增日期/時間\"\r\n      dropdownClassName={datePickerDropdownTheme}\r\n      style={props.styles}\r\n      value={props.value !== undefined ? moment(props.value, \"YYYY-MM-DD\") : undefined}\r\n      onChange={(value, dateString) => props.onChange(dateString)}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\n\r\nimport { Input } from \"antd\";\r\nconst { TextArea } = Input;\r\n\r\nconst TodoListInput = props => {\r\n  const { theme } = useContext(DarkModeContext);\r\n  const themeBg = `${theme.darkMode ? \"dark\" : \"light\"}`;\r\n  const themeFont = `${theme.darkMode ? \"dark-font\" : \"light-font\"}`;\r\n\r\n  return (\r\n    <Input\r\n      className={`${props.classNames} ${themeBg} ${themeFont} `}\r\n      ref={props.refs}\r\n      value={props.value}\r\n      placeholder={props.placeholder}\r\n      onChange={props.onChange}\r\n    />\r\n  );\r\n};\r\n\r\nconst TodoListTextArea = props => {\r\n  const { theme } = useContext(DarkModeContext);\r\n  const themeBg = `${theme.darkMode ? \"dark\" : \"light\"}`;\r\n  const themeFont = `${theme.darkMode ? \"dark-font\" : \"light-font\"}`;\r\n\r\n  return (\r\n    <TextArea\r\n      className={`${props.classNames} ${themeBg} ${themeFont}`}\r\n      rows={props.rows}\r\n      value={props.value}\r\n      placeholder={props.placeholder}\r\n      onChange={props.onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport { TodoListInput, TodoListTextArea };\r\n","import React, { useContext } from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\n\r\nexport default props => {\r\n  const { theme } = useContext(DarkModeContext);\r\n  const themeBg = `${theme.darkMode ? \"dark-button\" : \"light-button\"}`;\r\n\r\n  return (\r\n    <Button\r\n      ghost={props.ghost}\r\n      className={`${props.classNames} ${themeBg} `}\r\n      href={props.href}\r\n      style={props.styles}\r\n      icon={props.icon}\r\n      onClick={props.onClick}\r\n      htmlType={props.htmlType}\r\n      type={props.type}\r\n      disabled={props.disabled}>\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\n//components\r\nimport TodoListButton from \"components/utils/todoListButton\";\r\n\r\nexport default props => {\r\n  return (\r\n    <div className=\"todoForm-editItem\">\r\n      <TodoListButton ghost={true} classNames=\"todoForm-editItem-addBtn\" icon=\"plus\" onClick={props.TodoListAddOnClick}>\r\n        新增工作\r\n      </TodoListButton>\r\n      <TodoListButton\r\n        ghost={true}\r\n        classNames=\"todoForm-editItem-menu\"\r\n        icon={props.sortStateIcon}\r\n        onClick={props.TodoListSortOnClick}>\r\n        依日期排序\r\n      </TodoListButton>\r\n    </div>\r\n  );\r\n};\r\n","const inputTodoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_TITLE\":\r\n      return { ...state, todoInput: { ...state.todoInput, title: action.inputTitle } };\r\n\r\n    case \"INPUT_CONTENT\":\r\n      return { ...state, todoInput: { ...state.todoInput, content: action.inputContent } };\r\n\r\n    case \"INPUT_DATE\":\r\n      return { ...state, todoInput: { ...state.todoInput, date: action.inputDate } };\r\n\r\n    case \"INPUT_CLEAR\":\r\n      return { ...state, todoInput: { ...state.todoInput, title: \"\", content: \"\", date: \"\", done: false } };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default inputTodoReducer;\r\n","import React, { useState, useReducer, useContext, useRef, useCallback } from \"react\";\r\nimport \"components/todoForm/todoForm.scss\";\r\n\r\n//components\r\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\r\nimport { TodoListInput, TodoListTextArea } from \"components/utils/todoListInput\";\r\nimport TodoListButton from \"components/utils/todoListButton\";\r\nimport TodoFormEditItem from \"components/todoForm/todoForm-editItem\";\r\n\r\n// reducer\r\nimport inputTodoReducer from \"components/todoForm/reducer\";\r\nimport { TodoListContext } from \"hooks/useContextTodoList\";\r\n\r\nexport default props => {\r\n  const [todoEditState, setTodoEditState] = useState(false);\r\n\r\n  const { todo, todoListDispatch } = useContext(TodoListContext);\r\n  const [todoFormData, dispatchTodoInput] = useReducer(inputTodoReducer, {\r\n    todoInput: { title: \"\", content: \"\", date: \"\", done: false }\r\n  });\r\n  const inputRef = useRef();\r\n\r\n  const OnSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!todoFormData.todoInput) return;\r\n\r\n      props.todoItemValue(todoFormData.todoInput);\r\n      inputRef.current.focus();\r\n      dispatchTodoInput({ type: \"INPUT_CLEAR\" });\r\n    },\r\n    [todoFormData.todoInput, props]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {todoEditState ? (\r\n        <form className=\"todoList-form\" onSubmit={OnSubmit}>\r\n          <div className=\"todoList-form-item\">\r\n            <TodoListButton ghost={true} classNames=\"todoForm-closeBtn\" icon=\"close\" onClick={() => setTodoEditState(false)} />\r\n          </div>\r\n          <div className=\"todoList-form-item\">\r\n            <TodoListInput\r\n              classNames=\"todoList-input\"\r\n              refs={inputRef}\r\n              onChange={e => dispatchTodoInput({ type: \"INPUT_TITLE\", inputTitle: e.target.value })}\r\n              value={todoFormData.todoInput.title}\r\n              placeholder=\"輸入標題\"\r\n            />\r\n            <TodoListTextArea\r\n              rows={4}\r\n              placeholder=\"輸入詳細內容\"\r\n              onChange={e => dispatchTodoInput({ type: \"INPUT_CONTENT\", inputContent: e.target.value })}\r\n              value={todoFormData.todoInput.content}\r\n            />\r\n            <TodoListDatePicker\r\n              value={todoFormData.todoInput.date !== \"\" ? todoFormData.todoInput.date : undefined}\r\n              onChange={dateString => dispatchTodoInput({ type: \"INPUT_DATE\", inputDate: dateString })}\r\n            />\r\n            <TodoListButton\r\n              ghost={false}\r\n              htmlType=\"submit\"\r\n              disabled={todoFormData.todoInput.title !== \"\" ? false : true}\r\n              classNames=\"todoForm-addBtn\"\r\n              icon=\"plus\">\r\n              新增工作\r\n            </TodoListButton>\r\n          </div>\r\n        </form>\r\n      ) : (\r\n        <TodoFormEditItem\r\n          TodoListAddOnClick={() => setTodoEditState(true)}\r\n          TodoListSortOnClick={() => todoListDispatch({ type: \"SORT_ITEM_BY_DATE\" })}\r\n          sortStateIcon={todo.option.SortState ? \"sort-descending\" : \"sort-ascending\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport TodoListButton from \"components/utils/todoListButton\";\r\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\r\n\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\n\r\nimport moment from \"moment\";\r\n\r\nexport default props => {\r\n  const [dateEditState, setDateEditState] = useState(false);\r\n\r\n  const { theme } = useContext(DarkModeContext);\r\n  const themeFont = `${theme.darkMode ? \"dark-font\" : \"light-font\"}`;\r\n\r\n  const DateIsAfter = moment(props.todoItemDataSource.date).isAfter(moment().format(\"YYYY-MM-DD\"));\r\n  const TodoItemMarkDone = `${props.todoDoneState ? \"todoList-done\" : \"\"} ${themeFont}`;\r\n\r\n  return (\r\n    <div className={`todoList-item-text ${themeFont} ${TodoItemMarkDone}`}>\r\n      <div className=\"todoList-item-text-title\">{props.todoItemDataSource.title}</div>\r\n      <div className=\"todoList-item-text-content\">{props.todoItemDataSource.content}</div>\r\n      <div className=\"todoList-item-text-date\">\r\n        {props.todoItemDataSource.date !== \"\" && (\r\n          <>\r\n            {dateEditState ? (\r\n              <TodoListDatePicker\r\n                open={dateEditState}\r\n                value={props.todoItemDataSource.date === \"\" ? undefined : props.todoItemDataSource.date}\r\n                onChange={dateString => {\r\n                  setDateEditState(!dateEditState);\r\n                  props.editTodoItemDate(dateString);\r\n                }}\r\n              />\r\n            ) : (\r\n              <TodoListButton\r\n                ghost={theme.darkMode ? true : false}\r\n                styles={{ color: DateIsAfter ? \"#1a73e8\" : \"#d93025\" }}\r\n                icon={\"calendar\"}\r\n                onClick={() => setDateEditState(!dateEditState)}>\r\n                <span className={`${themeFont} ${TodoItemMarkDone}`}>{props.todoItemDataSource.date}</span>\r\n              </TodoListButton>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\r\nimport { TodoListInput, TodoListTextArea } from \"components/utils/todoListInput\";\r\n\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      <TodoListInput\r\n        classNames={`todoList-item-edit-component`}\r\n        value={props.todoItemDataSource.title}\r\n        placeholder=\"輸入標題\"\r\n        onChange={e => props.editTitle(e.target.value)}\r\n      />\r\n      <TodoListTextArea\r\n        classNames={`todoList-item-edit-component`}\r\n        value={props.todoItemDataSource.content}\r\n        placeholder=\"輸入詳細內容\"\r\n        onChange={e => props.editContent(e.target.value)}\r\n      />\r\n      <TodoListDatePicker\r\n        value={props.todoItemDataSource.date === \"\" ? undefined : props.todoItemDataSource.date}\r\n        onChange={dateString => props.editDate(dateString)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"components/todoItem/todoItem.scss\";\r\n\r\n//component\r\nimport { List, Tooltip } from \"antd\";\r\nimport TodoListButton from \"components/utils/todoListButton\";\r\nimport ItemContent from \"components/todoItem/todoItem-itemContent\";\r\nimport EditItem from \"components/todoItem/todoItem-editItem\";\r\n\r\n// global props\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\n\r\nexport default props => {\r\n  const [editState, setEditState] = useState(true);\r\n  const [editTodo, setEditTodo] = useState({ title: \"\", content: \"\", date: \"\", done: false });\r\n\r\n  const { theme } = useContext(DarkModeContext);\r\n  const themeBg = `${theme.darkMode ? \"dark-todoItem\" : \"light-todoItem\"}`;\r\n\r\n  useEffect(() => {\r\n    setEditTodo(props.todoItemDataSource);\r\n  }, [props.todoItemDataSource]);\r\n\r\n  const editTodoItem = () => {\r\n    setEditState(!editState);\r\n    props.editTodoItemText(editTodo);\r\n  };\r\n\r\n  return (\r\n    <List.Item className={themeBg}>\r\n      <div className=\"todoList-item\">\r\n        <TodoListButton\r\n          ghost={true}\r\n          classNames={\"todoList-item-ctrl\"}\r\n          styles={{ color: props.todoItemDataSource.done ? \"#1a73e8\" : \"#aaaaaa\" }}\r\n          onClick={editState ? props.markTodoDone : editTodoItem}\r\n          icon={\"check\"}\r\n        />\r\n        {editState ? (\r\n          <ItemContent\r\n            todoDoneState={props.todoDoneState}\r\n            todoItemDataSource={props.todoItemDataSource}\r\n            editTodoItemDate={date => props.editTodoItemText({ ...props.todoItemDataSource, date })}\r\n          />\r\n        ) : (\r\n          <EditItem\r\n            todoItemDataSource={editTodo}\r\n            editTitle={title => setEditTodo(prevState => ({ ...prevState, title }))}\r\n            editContent={content => setEditTodo(prevState => ({ ...prevState, content }))}\r\n            editDate={date => setEditTodo(prevState => ({ ...prevState, date }))}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {/* ctrl */}\r\n      <div className=\"todoList-ctrl\">\r\n        {editState && (\r\n          <Tooltip title=\"編輯詳細資訊\" placement=\"bottom\">\r\n            <TodoListButton ghost={true} classNames={`todoList-item-ctrl`} onClick={editTodoItem} icon={\"edit\"} />\r\n          </Tooltip>\r\n        )}\r\n        <Tooltip title=\"刪除\" placement=\"bottom\">\r\n          <TodoListButton ghost={true} classNames={`todoList-item-ctrl`} onClick={props.removeTodoItem} icon=\"delete\" />\r\n        </Tooltip>\r\n      </div>\r\n    </List.Item>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { List } from \"antd\";\r\n\r\nimport TodoFrom from \"components/todoForm/todoForm\";\r\nimport TodoItem from \"components/todoItem/todoItem\";\r\n\r\nimport { TodoListContext } from \"hooks/useContextTodoList\";\r\n\r\nexport default () => {\r\n  const { todo, todoListDispatch } = useContext(TodoListContext);\r\n\r\n  return (\r\n    <>\r\n      <TodoFrom todoItemValue={item => todoListDispatch({ type: \"ADD_ITEM\", addTodoListItem: item })} />\r\n      <List\r\n        bordered\r\n        locale={{ emptyText: \"目前無代辦事項\" }}\r\n        dataSource={todo.todoList}\r\n        renderItem={(item, index) => (\r\n          <TodoItem\r\n            todoDoneState={item.done}\r\n            markTodoDone={() => todoListDispatch({ type: \"DONE_ITEM\", doneItem: index })}\r\n            removeTodoItem={() => todoListDispatch({ type: \"REMOVE_ITEM\", removeItem: index })}\r\n            editTodoItemText={item => todoListDispatch({ type: \"EDIT_ITEM\", editIndex: index, editItem: item })}\r\n            todoItemDataSource={item}\r\n            key={index}\r\n          />\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport \"components/index.scss\";\r\n\r\nimport { TodoListProvider } from \"hooks/useContextTodoList\";\r\nimport { DarkModeContext } from \"hooks/useContextTheme\";\r\n\r\nimport Header from \"components/header/header\";\r\nimport TodoList from \"components/todoList/todoList\";\r\n\r\nexport default () => {\r\n  const { theme } = useContext(DarkModeContext);\r\n  const themeBg = `${theme.darkMode ? \"dark\" : \"light\"}`;\r\n\r\n  useEffect(() => {\r\n    document.getElementById(\"body\").className = themeBg;\r\n  }, [themeBg]);\r\n\r\n  return (\r\n    <div className={`App ${themeBg}`}>\r\n      <Header />\r\n      <TodoListProvider>\r\n        <TodoList />\r\n      </TodoListProvider>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport Page from \"components\";\r\nimport { ThemeProvider } from \"hooks/useContextTheme\";\r\nimport \"styles/theme.scss\";\r\nimport * as serviceWorker from \"serviceWorker\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider>\r\n      <Page />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nif (module.hot) {\r\n  module.hot.accept(\"components\", () => {\r\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n  });\r\n}\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}