{"version":3,"sources":["serviceWorker.js","reducers/themeReducer/themeReducer.js","reducers/todoReducer/todoReducer.js","reducers/combineReducer.js","reducers/index.js","components/utils/themeToggle/index.js","components/header/header.js","components/utils/todoListDatePicker/index.js","components/utils/todoListInput/index.js","components/utils/todoListButton/index.js","components/todoForm/todoForm-editItem.js","components/todoForm/reducer/index.js","components/todoForm/todoForm.js","components/todoItem/todoItem-itemContent.js","components/todoItem/todoItem-editItem.js","components/todoItem/todoItem.js","components/todoList/todoList.js","components/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initState","JSON","parse","localStorage","getItem","darkMode","todoList","option","SortState","localStorageTodoData","reducers","reducerKeys","Object","keys","objInitState","forEach","key","undefined","type","Error","action","previousState","combineReducer","theme","todo","addTodoListItem","todoList_newState","splice","removeItem","todoList_DoneItem","todoListIndex","doneItem","done","push","unshift","todoList_EditItem","findTodoListIndex","findIndex","obj","index","editIndex","finalTodoList","slice","editItem","todoList_SortItem","SortResult","sort","after","before","SortAfter","Number","date","replace","RegExp","SortBefore","ReducerContext","createContext","props","useContext","style","backgroundColor","checkedChildren","unCheckedChildren","defaultChecked","onChange","dispatch","useEffect","setItem","stringify","className","moment","format","title","src","frameBorder","scrolling","width","height","datePickerInputTheme","datePickerDropdownTheme","allowClear","showToday","locale","placeholder","dropdownClassName","styles","value","dateString","TextArea","Input","TodoListInput","themeBg","themeFont","ref","refs","TodoListTextArea","classnames","onClick","children","ghost","icon","TodoListAddOnClick","sortStateIcon","TodoListSortOnClick","inputTodoReducer","todoInput","inputTitle","content","inputContent","inputDate","useState","todoEditState","setTodoEditState","useReducer","todoFormData","dispatchTodoInput","inputRef","useRef","OnSubmit","useCallback","e","preventDefault","todoItemValue","current","focus","onSubmit","target","rows","htmlType","disabled","dateEditState","setDateEditState","DateIsAfter","todoItemDataSource","isAfter","TodoItemMarkDone","todoDoneState","open","editTodoItemDate","color","editTitle","editContent","editDate","editState","setEditState","editTodo","setEditTodo","editTodoItem","editTodoItemText","Item","markTodoDone","prevState","placement","removeTodoItem","item","bordered","emptyText","dataSource","renderItem","document","getElementById","ReactDOM","render","reducer","Provider","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f1e7c632.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const localState = JSON.parse(localStorage.getItem(\"themeMode\"));\n\nconst initState = localState || { darkMode: false };\n\nconst themeReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"DARK_MODE\":\n      return { ...state, darkMode: !state.darkMode };\n\n    default:\n      return state;\n  }\n};\n\nexport { themeReducer };\n","const initState = {\n  todoList: [],\n  option: { SortState: true }\n};\n\nconst localStorageTodoData = JSON.parse(localStorage.getItem(\"test\"));\n\nconst todoReducer = (state = localStorageTodoData || initState, action) => {\n  switch (action.type) {\n    // 增加項目\n    case \"ADD_ITEM\":\n      return { ...state, todoList: [action.addTodoListItem, ...state.todoList] };\n\n    // 刪除項目\n    case \"REMOVE_ITEM\":\n      const todoList_newState = [...state.todoList];\n      todoList_newState.splice(action.removeItem, 1);\n      return { ...state, todoList: todoList_newState };\n\n    // 項目標示完成\n    case \"DONE_ITEM\":\n      const todoList_DoneItem = [...state.todoList];\n      const todoListIndex = todoList_DoneItem[action.doneItem];\n      todoList_DoneItem.splice(action.doneItem, 1);\n\n      todoListIndex.done = !todoListIndex.done;\n      todoListIndex.done ? todoList_DoneItem.push(todoListIndex) : todoList_DoneItem.unshift(todoListIndex);\n      return { ...state, todoList: todoList_DoneItem };\n\n    // 編輯項目\n    case \"EDIT_ITEM\":\n      const todoList_EditItem = [...state.todoList];\n      const findTodoListIndex = todoList_EditItem.findIndex((obj, index) => index === action.editIndex);\n      const finalTodoList = [\n        ...todoList_EditItem.slice(0, findTodoListIndex),\n        action.editItem,\n        ...todoList_EditItem.slice(findTodoListIndex + 1)\n      ];\n      return { ...state, todoList: finalTodoList };\n\n    // 項目排序\n    case \"SORT_ITEM_BY_DATE\":\n      const todoList_SortItem = [...state.todoList];\n      state.option.SortState = !state.option.SortState;\n\n      const SortResult = todoList_SortItem.sort((after, before) => {\n        let SortAfter = Number(after.date.replace(new RegExp(\"-\", \"g\"), \"\"));\n        let SortBefore = Number(before.date.replace(new RegExp(\"-\", \"g\"), \"\"));\n        return state.option.SortState ? SortAfter - SortBefore : SortBefore - SortAfter;\n      });\n\n      return { ...state, todoList: SortResult };\n\n    default:\n      return state;\n  }\n};\n\nexport { todoReducer };\n","const combineReducer = reducers => {\n  const reducerKeys = Object.keys(reducers);\n  let objInitState = {};\n\n  reducerKeys.forEach(key => {\n    const initState = reducers[key](undefined, { type: \"\" });\n    if (initState === \"undefined\") {\n      throw new Error(`${key} does not return state.`);\n    }\n    objInitState[key] = initState;\n  });\n\n  return (state, action) => {\n    if (action) {\n      reducerKeys.forEach(key => {\n        const previousState = objInitState[key];\n        objInitState[key] = reducers[key](previousState, action);\n      });\n    }\n\n    return { ...objInitState };\n  };\n};\n\nexport { combineReducer };\n","import { createContext } from \"react\";\n\nimport { themeReducer } from \"reducers/themeReducer/themeReducer\";\nimport { todoReducer } from \"reducers/todoReducer/todoReducer\";\n\nimport { combineReducer } from \"reducers/combineReducer\";\n\nconst reducers = combineReducer({\n  theme: themeReducer,\n  todo: todoReducer\n});\n\nconst ReducerContext = createContext();\n\nexport { reducers, ReducerContext };\n","import React, { useContext } from \"react\";\n\nimport { Switch } from \"antd\";\n\nimport { ReducerContext } from \"reducers\";\n\nexport default props => {\n  const [state] = useContext(ReducerContext);\n  return (\n    <Switch\n      style={{ backgroundColor: \"#0f1114\" }}\n      checkedChildren=\"Light\"\n      unCheckedChildren=\"Dark\"\n      defaultChecked={!state.theme.darkMode}\n      onChange={props.onChange}\n    />\n  );\n};\n","import React, { useEffect, useContext } from \"react\";\nimport \"components/header/header.scss\";\n\nimport moment from \"moment\";\n\nimport ThemeToggle from \"components/utils/themeToggle\";\n\nimport { ReducerContext } from \"reducers\";\n\nexport default () => {\n  const [state, dispatch] = useContext(ReducerContext);\n\n  useEffect(() => {\n    localStorage.setItem(\"themeMode\", JSON.stringify(state.theme));\n  }, [state.theme]);\n\n  return (\n    <header className=\"App-header\">\n      <div className=\"App-header-Item\">\n        <h2>Tasks</h2>\n        <div className=\"App-header-date\">{moment().format(\"YYYY-MM-DD\")}</div>\n      </div>\n      <div className=\"App-header-Item\">\n        <iframe\n          title=\"github-todolist\"\n          src=\"https://ghbtns.com/github-btn.html?user=destroymayor&repo=todolist&type=star&count=true\"\n          frameBorder=\"0\"\n          scrolling=\"0\"\n          width=\"80px\"\n          height=\"20px\"\n        />\n        <ThemeToggle onChange={() => dispatch({ type: \"DARK_MODE\" })} />\n      </div>\n    </header>\n  );\n};\n","import React, { useContext } from \"react\";\nimport \"components/utils/todoListDatePicker/index.scss\";\n\nimport locale from \"antd/lib/date-picker/locale/zh_TW\";\nimport { DatePicker } from \"antd\";\nimport moment from \"moment\";\n\nimport { ReducerContext } from \"reducers\";\n\nexport default props => {\n  const [state] = useContext(ReducerContext);\n  const datePickerInputTheme = state.theme.darkMode ? \"todoList-form-item-date-dark\" : \"todoList-form-item-date-light\";\n  const datePickerDropdownTheme = state.theme.darkMode ? \"ant-calendar-panel-dark\" : \"ant-calendar-panel-light\";\n\n  return (\n    <DatePicker\n      {...props}\n      allowClear={false}\n      showToday={false}\n      className={`${datePickerInputTheme}`}\n      locale={locale}\n      format=\"YYYY-MM-DD\"\n      placeholder=\"新增日期/時間\"\n      dropdownClassName={datePickerDropdownTheme}\n      style={props.styles}\n      value={props.value !== undefined ? moment(props.value, \"YYYY-MM-DD\") : undefined}\n      onChange={(value, dateString) => props.onChange(dateString)}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\n\nimport { ReducerContext } from \"reducers\";\n\nimport { Input } from \"antd\";\nconst { TextArea } = Input;\n\nconst TodoListInput = props => {\n  const [state] = useContext(ReducerContext);\n  const themeBg = `${state.theme.darkMode ? \"dark\" : \"light\"}`;\n  const themeFont = `${state.theme.darkMode ? \"dark-font\" : \"light-font\"}`;\n\n  return <Input {...props} className={`${props.className} ${themeBg} ${themeFont} `} ref={props.refs} />;\n};\n\nconst TodoListTextArea = props => {\n  const [state] = useContext(ReducerContext);\n  const themeBg = `${state.theme.darkMode ? \"dark\" : \"light\"}`;\n  const themeFont = `${state.theme.darkMode ? \"dark-font\" : \"light-font\"}`;\n\n  return <TextArea {...props} className={`${props.className} ${themeBg} ${themeFont}`} />;\n};\n\nexport { TodoListInput, TodoListTextArea };\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\n\nimport { ReducerContext } from \"reducers\";\n\nexport default props => {\n  const [state] = useContext(ReducerContext);\n  const themeBg = `${state.theme.darkMode ? \"dark-button\" : \"light-button\"}`;\n\n  return (\n    <Button {...props} className={`${themeBg} ${props.classnames}`} style={props.styles} onClick={props.onClick}>\n      {props.children}\n    </Button>\n  );\n};\n","import React from \"react\";\n\n//components\nimport TodoListButton from \"components/utils/todoListButton\";\n\nexport default props => {\n  return (\n    <div className=\"todoForm-editItem\">\n      <TodoListButton ghost={true} classnames=\"todoForm-editItem-addBtn\" icon=\"plus\" onClick={props.TodoListAddOnClick}>\n        新增工作\n      </TodoListButton>\n      <TodoListButton\n        ghost={true}\n        classnames=\"todoForm-editItem-menu\"\n        icon={props.sortStateIcon}\n        onClick={props.TodoListSortOnClick}>\n        依日期排序\n      </TodoListButton>\n    </div>\n  );\n};\n","const inputTodoReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_TITLE\":\n      return { ...state, todoInput: { ...state.todoInput, title: action.inputTitle } };\n\n    case \"INPUT_CONTENT\":\n      return { ...state, todoInput: { ...state.todoInput, content: action.inputContent } };\n\n    case \"INPUT_DATE\":\n      return { ...state, todoInput: { ...state.todoInput, date: action.inputDate } };\n\n    case \"INPUT_CLEAR\":\n      return { ...state, todoInput: { ...state.todoInput, title: \"\", content: \"\", date: \"\", done: false } };\n\n    default:\n      return state;\n  }\n};\n\nexport default inputTodoReducer;\n","import React, { useState, useReducer, useContext, useRef, useCallback } from \"react\";\nimport \"components/todoForm/todoForm.scss\";\n\n//components\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\nimport { TodoListInput, TodoListTextArea } from \"components/utils/todoListInput\";\nimport TodoListButton from \"components/utils/todoListButton\";\nimport TodoFormEditItem from \"components/todoForm/todoForm-editItem\";\n\n// reducer\nimport inputTodoReducer from \"components/todoForm/reducer\";\nimport { ReducerContext } from \"reducers\";\n\nexport default props => {\n  const [todoEditState, setTodoEditState] = useState(false);\n\n  const [state, dispatch] = useContext(ReducerContext);\n  const [todoFormData, dispatchTodoInput] = useReducer(inputTodoReducer, {\n    todoInput: { title: \"\", content: \"\", date: \"\", done: false }\n  });\n  const inputRef = useRef();\n\n  const OnSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      if (!todoFormData.todoInput) return;\n\n      props.todoItemValue(todoFormData.todoInput);\n      inputRef.current.focus();\n      dispatchTodoInput({ type: \"INPUT_CLEAR\" });\n    },\n    [todoFormData.todoInput, props]\n  );\n\n  return (\n    <>\n      {todoEditState ? (\n        <form className=\"todoList-form\" onSubmit={OnSubmit}>\n          <div className=\"todoList-form-item\">\n            <TodoListButton ghost={true} classnames=\"todoForm-closeBtn\" icon=\"close\" onClick={() => setTodoEditState(false)} />\n          </div>\n          <div className=\"todoList-form-item\">\n            <TodoListInput\n              className=\"todoList-input\"\n              refs={inputRef}\n              onChange={e => dispatchTodoInput({ type: \"INPUT_TITLE\", inputTitle: e.target.value })}\n              value={todoFormData.todoInput.title}\n              placeholder=\"輸入標題\"\n            />\n            <TodoListTextArea\n              rows={4}\n              placeholder=\"輸入詳細內容\"\n              onChange={e => dispatchTodoInput({ type: \"INPUT_CONTENT\", inputContent: e.target.value })}\n              value={todoFormData.todoInput.content}\n            />\n            <TodoListDatePicker\n              value={todoFormData.todoInput.date !== \"\" ? todoFormData.todoInput.date : undefined}\n              onChange={dateString => dispatchTodoInput({ type: \"INPUT_DATE\", inputDate: dateString })}\n            />\n            <TodoListButton\n              ghost={false}\n              htmlType=\"submit\"\n              disabled={todoFormData.todoInput.title !== \"\" ? false : true}\n              classnames=\"todoForm-addBtn\"\n              icon=\"plus\">\n              新增工作\n            </TodoListButton>\n          </div>\n        </form>\n      ) : (\n        <TodoFormEditItem\n          TodoListAddOnClick={() => setTodoEditState(true)}\n          TodoListSortOnClick={() => dispatch({ type: \"SORT_ITEM_BY_DATE\" })}\n          sortStateIcon={state.todo.option.SortState ? \"sort-descending\" : \"sort-ascending\"}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState, useContext } from \"react\";\n\nimport TodoListButton from \"components/utils/todoListButton\";\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\n\nimport { ReducerContext } from \"reducers\";\n\nimport moment from \"moment\";\n\nexport default props => {\n  const [dateEditState, setDateEditState] = useState(false);\n  const [state] = useContext(ReducerContext);\n  const themeFont = `${state.theme.darkMode ? \"dark-font\" : \"light-font\"}`;\n\n  const DateIsAfter = moment(props.todoItemDataSource.date).isAfter(moment().format(\"YYYY-MM-DD\"));\n  const TodoItemMarkDone = `${props.todoDoneState ? \"todoList-done\" : \"\"} ${themeFont}`;\n\n  return (\n    <div className={`todoList-item-text ${themeFont} ${TodoItemMarkDone}`}>\n      <div className=\"todoList-item-text-title\">{props.todoItemDataSource.title}</div>\n      <div className=\"todoList-item-text-content\">{props.todoItemDataSource.content}</div>\n      <div className=\"todoList-item-text-date\">\n        {props.todoItemDataSource.date !== \"\" && (\n          <>\n            {dateEditState ? (\n              <TodoListDatePicker\n                open={dateEditState}\n                value={props.todoItemDataSource.date === \"\" ? undefined : props.todoItemDataSource.date}\n                onChange={dateString => {\n                  setDateEditState(!dateEditState);\n                  props.editTodoItemDate(dateString);\n                }}\n              />\n            ) : (\n              <TodoListButton\n                ghost={state.theme.darkMode ? true : false}\n                styles={{ color: DateIsAfter ? \"#1a73e8\" : \"#d93025\" }}\n                icon={\"calendar\"}\n                onClick={() => setDateEditState(!dateEditState)}>\n                <span className={`${themeFont} ${TodoItemMarkDone}`}>{props.todoItemDataSource.date}</span>\n              </TodoListButton>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport TodoListDatePicker from \"components/utils/todoListDatePicker\";\nimport { TodoListInput, TodoListTextArea } from \"components/utils/todoListInput\";\n\nexport default props => {\n  return (\n    <div>\n      <TodoListInput\n        className={`todoList-item-edit-component`}\n        value={props.todoItemDataSource.title}\n        placeholder=\"輸入標題\"\n        onChange={e => props.editTitle(e.target.value)}\n      />\n      <TodoListTextArea\n        className={`todoList-item-edit-component`}\n        value={props.todoItemDataSource.content}\n        placeholder=\"輸入詳細內容\"\n        onChange={e => props.editContent(e.target.value)}\n      />\n      <TodoListDatePicker\n        value={props.todoItemDataSource.date === \"\" ? undefined : props.todoItemDataSource.date}\n        onChange={dateString => props.editDate(dateString)}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"components/todoItem/todoItem.scss\";\n\n//component\nimport { List, Tooltip } from \"antd\";\nimport TodoListButton from \"components/utils/todoListButton\";\nimport ItemContent from \"components/todoItem/todoItem-itemContent\";\nimport EditItem from \"components/todoItem/todoItem-editItem\";\n\n// global props\nimport { ReducerContext } from \"reducers\";\n\nexport default props => {\n  const [editState, setEditState] = useState(true);\n  const [editTodo, setEditTodo] = useState({ title: \"\", content: \"\", date: \"\", done: false });\n\n  const [state] = useContext(ReducerContext);\n  const themeBg = `${state.theme.darkMode ? \"dark-todoItem\" : \"light-todoItem\"}`;\n\n  useEffect(() => {\n    setEditTodo(props.todoItemDataSource);\n  }, [props.todoItemDataSource]);\n\n  const editTodoItem = () => {\n    setEditState(!editState);\n    props.editTodoItemText(editTodo);\n  };\n\n  return (\n    <List.Item className={themeBg}>\n      <div className=\"todoList-item\">\n        <TodoListButton\n          ghost={true}\n          classnames={\"todoList-item-ctrl\"}\n          styles={{ color: props.todoItemDataSource.done ? \"#1a73e8\" : \"#aaaaaa\" }}\n          onClick={editState ? props.markTodoDone : editTodoItem}\n          icon={\"check\"}\n        />\n        {editState ? (\n          <ItemContent\n            todoDoneState={props.todoDoneState}\n            todoItemDataSource={props.todoItemDataSource}\n            editTodoItemDate={date => props.editTodoItemText({ ...props.todoItemDataSource, date })}\n          />\n        ) : (\n          <EditItem\n            todoItemDataSource={editTodo}\n            editTitle={title => setEditTodo(prevState => ({ ...prevState, title }))}\n            editContent={content => setEditTodo(prevState => ({ ...prevState, content }))}\n            editDate={date => setEditTodo(prevState => ({ ...prevState, date }))}\n          />\n        )}\n      </div>\n\n      {/* ctrl */}\n      <div className=\"todoList-ctrl\">\n        {editState && (\n          <Tooltip title=\"編輯詳細資訊\" placement=\"bottom\">\n            <TodoListButton ghost={true} classnames={`todoList-item-ctrl`} onClick={editTodoItem} icon={\"edit\"} />\n          </Tooltip>\n        )}\n        <Tooltip title=\"刪除\" placement=\"bottom\">\n          <TodoListButton ghost={true} classnames={`todoList-item-ctrl`} onClick={props.removeTodoItem} icon=\"delete\" />\n        </Tooltip>\n      </div>\n    </List.Item>\n  );\n};\n","import React, { useEffect, useContext } from \"react\";\nimport { List } from \"antd\";\n\nimport TodoFrom from \"components/todoForm/todoForm\";\nimport TodoItem from \"components/todoItem/todoItem\";\n\nimport { ReducerContext } from \"reducers\";\n\nexport default () => {\n  const [state, dispatch] = useContext(ReducerContext);\n\n  useEffect(() => {\n    localStorage.setItem(\"test\", JSON.stringify(state.todo));\n  }, [state.todo]);\n\n  return (\n    <>\n      <TodoFrom todoItemValue={item => dispatch({ type: \"ADD_ITEM\", addTodoListItem: item })} />\n      <List\n        bordered\n        locale={{ emptyText: \"目前無代辦事項\" }}\n        dataSource={state.todo.todoList}\n        renderItem={(item, index) => (\n          <TodoItem\n            todoDoneState={item.done}\n            markTodoDone={() => dispatch({ type: \"DONE_ITEM\", doneItem: index })}\n            removeTodoItem={() => dispatch({ type: \"REMOVE_ITEM\", removeItem: index })}\n            editTodoItemText={item => dispatch({ type: \"EDIT_ITEM\", editIndex: index, editItem: item })}\n            todoItemDataSource={item}\n            key={index}\n          />\n        )}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useContext } from \"react\";\nimport \"components/index.scss\";\n\nimport { ReducerContext } from \"reducers\";\n\nimport Header from \"components/header/header\";\nimport TodoList from \"components/todoList/todoList\";\n\nexport default () => {\n  const [state] = useContext(ReducerContext);\n  const themeBg = `${state.theme.darkMode ? \"dark\" : \"light\"}`;\n\n  useEffect(() => {\n    document.getElementById(\"body\").className = themeBg;\n  }, [themeBg]);\n\n  return (\n    <div className={`App ${themeBg}`}>\n      <Header />\n      <TodoList />\n    </div>\n  );\n};\n","import React, { useReducer } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"styles/theme.scss\";\n\nimport * as serviceWorker from \"serviceWorker\";\nimport Page from \"components\";\n\nimport { reducers, ReducerContext } from \"reducers\";\nconst initState = reducers();\n\nconst App = () => {\n  const reducer = useReducer(reducers, initState);\n  return (\n    <ReducerContext.Provider value={reducer}>\n      <Page />\n    </ReducerContext.Provider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept(\"components\", () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n  });\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}